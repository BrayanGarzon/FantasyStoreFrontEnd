/* tslint:disable */
/* eslint-disable */
/**
 * FantasyStore
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CustomTokenObtainPairRequest } from '../models';
// @ts-ignore
import type { GeneralMessage } from '../models';
// @ts-ignore
import type { LogoutRequest } from '../models';
// @ts-ignore
import type { ResetPasswordCodeValidateRequestRequest } from '../models';
// @ts-ignore
import type { ResetPasswordRequest } from '../models';
// @ts-ignore
import type { ResetPasswordRequestRequest } from '../models';
// @ts-ignore
import type { TokenOutput } from '../models';
// @ts-ignore
import type { TokenRefresh } from '../models';
// @ts-ignore
import type { TokenRefreshRequest } from '../models';
// @ts-ignore
import type { UpdatePasswordRequest } from '../models';
// @ts-ignore
import type { ValidateCodeRequest } from '../models';
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generar codigo de seguridad para el cambio de contraeña
         * @param {ResetPasswordRequestRequest} resetPasswordRequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationGenerateCodeCreate: async (resetPasswordRequestRequest: ResetPasswordRequestRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resetPasswordRequestRequest' is not null or undefined
            assertParamExists('authenticationGenerateCodeCreate', 'resetPasswordRequestRequest', resetPasswordRequestRequest)
            const localVarPath = `/api/authentication/generate-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordRequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Iniciar Sesión
         * @param {CustomTokenObtainPairRequest} customTokenObtainPairRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationLoginCreate: async (customTokenObtainPairRequest: CustomTokenObtainPairRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customTokenObtainPairRequest' is not null or undefined
            assertParamExists('authenticationLoginCreate', 'customTokenObtainPairRequest', customTokenObtainPairRequest)
            const localVarPath = `/api/authentication/login/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customTokenObtainPairRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cerrar sesión
         * @param {LogoutRequest} logoutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationLogoutCreate: async (logoutRequest: LogoutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logoutRequest' is not null or undefined
            assertParamExists('authenticationLogoutCreate', 'logoutRequest', logoutRequest)
            const localVarPath = `/api/authentication/logout/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logoutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * restablecer la contraseña atraves de codigo de seguridad
         * @summary Restablecer la contraseña
         * @param {ResetPasswordRequest} resetPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationRecoverPasswordCodeCreate: async (resetPasswordRequest: ResetPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resetPasswordRequest' is not null or undefined
            assertParamExists('authenticationRecoverPasswordCodeCreate', 'resetPasswordRequest', resetPasswordRequest)
            const localVarPath = `/api/authentication/recover-password-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefreshRequest} tokenRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationRefreshCreate: async (tokenRefreshRequest: TokenRefreshRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenRefreshRequest' is not null or undefined
            assertParamExists('authenticationRefreshCreate', 'tokenRefreshRequest', tokenRefreshRequest)
            const localVarPath = `/api/authentication/refresh/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenRefreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Actualizar contraseña
         * @summary Actualizar contraseña
         * @param {UpdatePasswordRequest} updatePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationUpdatePasswordCreate: async (updatePasswordRequest: UpdatePasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updatePasswordRequest' is not null or undefined
            assertParamExists('authenticationUpdatePasswordCreate', 'updatePasswordRequest', updatePasswordRequest)
            const localVarPath = `/api/authentication/update-password/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordCodeValidateRequestRequest} resetPasswordCodeValidateRequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationValidateCodeCreate: async (resetPasswordCodeValidateRequestRequest: ResetPasswordCodeValidateRequestRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resetPasswordCodeValidateRequestRequest' is not null or undefined
            assertParamExists('authenticationValidateCodeCreate', 'resetPasswordCodeValidateRequestRequest', resetPasswordCodeValidateRequestRequest)
            const localVarPath = `/api/authentication/validate-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordCodeValidateRequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Generar codigo de seguridad para el cambio de contraeña
         * @param {ResetPasswordRequestRequest} resetPasswordRequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticationGenerateCodeCreate(resetPasswordRequestRequest: ResetPasswordRequestRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticationGenerateCodeCreate(resetPasswordRequestRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.authenticationGenerateCodeCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Iniciar Sesión
         * @param {CustomTokenObtainPairRequest} customTokenObtainPairRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticationLoginCreate(customTokenObtainPairRequest: CustomTokenObtainPairRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticationLoginCreate(customTokenObtainPairRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.authenticationLoginCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cerrar sesión
         * @param {LogoutRequest} logoutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticationLogoutCreate(logoutRequest: LogoutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticationLogoutCreate(logoutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.authenticationLogoutCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * restablecer la contraseña atraves de codigo de seguridad
         * @summary Restablecer la contraseña
         * @param {ResetPasswordRequest} resetPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticationRecoverPasswordCodeCreate(resetPasswordRequest: ResetPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticationRecoverPasswordCodeCreate(resetPasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.authenticationRecoverPasswordCodeCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefreshRequest} tokenRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticationRefreshCreate(tokenRefreshRequest: TokenRefreshRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenRefresh>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticationRefreshCreate(tokenRefreshRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.authenticationRefreshCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Actualizar contraseña
         * @summary Actualizar contraseña
         * @param {UpdatePasswordRequest} updatePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticationUpdatePasswordCreate(updatePasswordRequest: UpdatePasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticationUpdatePasswordCreate(updatePasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.authenticationUpdatePasswordCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResetPasswordCodeValidateRequestRequest} resetPasswordCodeValidateRequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticationValidateCodeCreate(resetPasswordCodeValidateRequestRequest: ResetPasswordCodeValidateRequestRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidateCodeRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticationValidateCodeCreate(resetPasswordCodeValidateRequestRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.authenticationValidateCodeCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @summary Generar codigo de seguridad para el cambio de contraeña
         * @param {AuthenticationApiAuthenticationGenerateCodeCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationGenerateCodeCreate(requestParameters: AuthenticationApiAuthenticationGenerateCodeCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<GeneralMessage> {
            return localVarFp.authenticationGenerateCodeCreate(requestParameters.resetPasswordRequestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Iniciar Sesión
         * @param {AuthenticationApiAuthenticationLoginCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationLoginCreate(requestParameters: AuthenticationApiAuthenticationLoginCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenOutput> {
            return localVarFp.authenticationLoginCreate(requestParameters.customTokenObtainPairRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Cerrar sesión
         * @param {AuthenticationApiAuthenticationLogoutCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationLogoutCreate(requestParameters: AuthenticationApiAuthenticationLogoutCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authenticationLogoutCreate(requestParameters.logoutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * restablecer la contraseña atraves de codigo de seguridad
         * @summary Restablecer la contraseña
         * @param {AuthenticationApiAuthenticationRecoverPasswordCodeCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationRecoverPasswordCodeCreate(requestParameters: AuthenticationApiAuthenticationRecoverPasswordCodeCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<GeneralMessage> {
            return localVarFp.authenticationRecoverPasswordCodeCreate(requestParameters.resetPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {AuthenticationApiAuthenticationRefreshCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationRefreshCreate(requestParameters: AuthenticationApiAuthenticationRefreshCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenRefresh> {
            return localVarFp.authenticationRefreshCreate(requestParameters.tokenRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Actualizar contraseña
         * @summary Actualizar contraseña
         * @param {AuthenticationApiAuthenticationUpdatePasswordCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationUpdatePasswordCreate(requestParameters: AuthenticationApiAuthenticationUpdatePasswordCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<GeneralMessage> {
            return localVarFp.authenticationUpdatePasswordCreate(requestParameters.updatePasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthenticationApiAuthenticationValidateCodeCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationValidateCodeCreate(requestParameters: AuthenticationApiAuthenticationValidateCodeCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ValidateCodeRequest> {
            return localVarFp.authenticationValidateCodeCreate(requestParameters.resetPasswordCodeValidateRequestRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authenticationGenerateCodeCreate operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAuthenticationGenerateCodeCreateRequest
 */
export interface AuthenticationApiAuthenticationGenerateCodeCreateRequest {
    /**
     * 
     * @type {ResetPasswordRequestRequest}
     * @memberof AuthenticationApiAuthenticationGenerateCodeCreate
     */
    readonly resetPasswordRequestRequest: ResetPasswordRequestRequest
}

/**
 * Request parameters for authenticationLoginCreate operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAuthenticationLoginCreateRequest
 */
export interface AuthenticationApiAuthenticationLoginCreateRequest {
    /**
     * 
     * @type {CustomTokenObtainPairRequest}
     * @memberof AuthenticationApiAuthenticationLoginCreate
     */
    readonly customTokenObtainPairRequest: CustomTokenObtainPairRequest
}

/**
 * Request parameters for authenticationLogoutCreate operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAuthenticationLogoutCreateRequest
 */
export interface AuthenticationApiAuthenticationLogoutCreateRequest {
    /**
     * 
     * @type {LogoutRequest}
     * @memberof AuthenticationApiAuthenticationLogoutCreate
     */
    readonly logoutRequest: LogoutRequest
}

/**
 * Request parameters for authenticationRecoverPasswordCodeCreate operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAuthenticationRecoverPasswordCodeCreateRequest
 */
export interface AuthenticationApiAuthenticationRecoverPasswordCodeCreateRequest {
    /**
     * 
     * @type {ResetPasswordRequest}
     * @memberof AuthenticationApiAuthenticationRecoverPasswordCodeCreate
     */
    readonly resetPasswordRequest: ResetPasswordRequest
}

/**
 * Request parameters for authenticationRefreshCreate operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAuthenticationRefreshCreateRequest
 */
export interface AuthenticationApiAuthenticationRefreshCreateRequest {
    /**
     * 
     * @type {TokenRefreshRequest}
     * @memberof AuthenticationApiAuthenticationRefreshCreate
     */
    readonly tokenRefreshRequest: TokenRefreshRequest
}

/**
 * Request parameters for authenticationUpdatePasswordCreate operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAuthenticationUpdatePasswordCreateRequest
 */
export interface AuthenticationApiAuthenticationUpdatePasswordCreateRequest {
    /**
     * 
     * @type {UpdatePasswordRequest}
     * @memberof AuthenticationApiAuthenticationUpdatePasswordCreate
     */
    readonly updatePasswordRequest: UpdatePasswordRequest
}

/**
 * Request parameters for authenticationValidateCodeCreate operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAuthenticationValidateCodeCreateRequest
 */
export interface AuthenticationApiAuthenticationValidateCodeCreateRequest {
    /**
     * 
     * @type {ResetPasswordCodeValidateRequestRequest}
     * @memberof AuthenticationApiAuthenticationValidateCodeCreate
     */
    readonly resetPasswordCodeValidateRequestRequest: ResetPasswordCodeValidateRequestRequest
}

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @summary Generar codigo de seguridad para el cambio de contraeña
     * @param {AuthenticationApiAuthenticationGenerateCodeCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticationGenerateCodeCreate(requestParameters: AuthenticationApiAuthenticationGenerateCodeCreateRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authenticationGenerateCodeCreate(requestParameters.resetPasswordRequestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Iniciar Sesión
     * @param {AuthenticationApiAuthenticationLoginCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticationLoginCreate(requestParameters: AuthenticationApiAuthenticationLoginCreateRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authenticationLoginCreate(requestParameters.customTokenObtainPairRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cerrar sesión
     * @param {AuthenticationApiAuthenticationLogoutCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticationLogoutCreate(requestParameters: AuthenticationApiAuthenticationLogoutCreateRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authenticationLogoutCreate(requestParameters.logoutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * restablecer la contraseña atraves de codigo de seguridad
     * @summary Restablecer la contraseña
     * @param {AuthenticationApiAuthenticationRecoverPasswordCodeCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticationRecoverPasswordCodeCreate(requestParameters: AuthenticationApiAuthenticationRecoverPasswordCodeCreateRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authenticationRecoverPasswordCodeCreate(requestParameters.resetPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param {AuthenticationApiAuthenticationRefreshCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticationRefreshCreate(requestParameters: AuthenticationApiAuthenticationRefreshCreateRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authenticationRefreshCreate(requestParameters.tokenRefreshRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Actualizar contraseña
     * @summary Actualizar contraseña
     * @param {AuthenticationApiAuthenticationUpdatePasswordCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticationUpdatePasswordCreate(requestParameters: AuthenticationApiAuthenticationUpdatePasswordCreateRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authenticationUpdatePasswordCreate(requestParameters.updatePasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthenticationApiAuthenticationValidateCodeCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticationValidateCodeCreate(requestParameters: AuthenticationApiAuthenticationValidateCodeCreateRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authenticationValidateCodeCreate(requestParameters.resetPasswordCodeValidateRequestRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

