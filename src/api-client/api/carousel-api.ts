/* tslint:disable */
/* eslint-disable */
/**
 * FantasyStore
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CarouselItemRequest } from '../models';
// @ts-ignore
import type { CarouselItemRequestRequest } from '../models';
// @ts-ignore
import type { CarouselItemResponse } from '../models';
// @ts-ignore
import type { PatchedCarouselItemRequestRequest } from '../models';
/**
 * CarouselApi - axios parameter creator
 * @export
 */
export const CarouselApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CarouselItemRequestRequest} carouselItemRequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainCarouselCarouselCreate: async (carouselItemRequestRequest: CarouselItemRequestRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carouselItemRequestRequest' is not null or undefined
            assertParamExists('mainCarouselCarouselCreate', 'carouselItemRequestRequest', carouselItemRequestRequest)
            const localVarPath = `/api/main/carousel/carousel/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(carouselItemRequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this carousel item model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainCarouselCarouselDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mainCarouselCarouselDestroy', 'id', id)
            const localVarPath = `/api/main/carousel/carousel/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainCarouselCarouselList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/main/carousel/carousel/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this carousel item model.
         * @param {PatchedCarouselItemRequestRequest} [patchedCarouselItemRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainCarouselCarouselPartialUpdate: async (id: number, patchedCarouselItemRequestRequest?: PatchedCarouselItemRequestRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mainCarouselCarouselPartialUpdate', 'id', id)
            const localVarPath = `/api/main/carousel/carousel/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedCarouselItemRequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this carousel item model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainCarouselCarouselRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mainCarouselCarouselRetrieve', 'id', id)
            const localVarPath = `/api/main/carousel/carousel/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this carousel item model.
         * @param {CarouselItemRequestRequest} carouselItemRequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainCarouselCarouselUpdate: async (id: number, carouselItemRequestRequest: CarouselItemRequestRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mainCarouselCarouselUpdate', 'id', id)
            // verify required parameter 'carouselItemRequestRequest' is not null or undefined
            assertParamExists('mainCarouselCarouselUpdate', 'carouselItemRequestRequest', carouselItemRequestRequest)
            const localVarPath = `/api/main/carousel/carousel/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(carouselItemRequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CarouselApi - functional programming interface
 * @export
 */
export const CarouselApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CarouselApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CarouselItemRequestRequest} carouselItemRequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mainCarouselCarouselCreate(carouselItemRequestRequest: CarouselItemRequestRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarouselItemRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mainCarouselCarouselCreate(carouselItemRequestRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarouselApi.mainCarouselCarouselCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this carousel item model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mainCarouselCarouselDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mainCarouselCarouselDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarouselApi.mainCarouselCarouselDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mainCarouselCarouselList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CarouselItemResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mainCarouselCarouselList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarouselApi.mainCarouselCarouselList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this carousel item model.
         * @param {PatchedCarouselItemRequestRequest} [patchedCarouselItemRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mainCarouselCarouselPartialUpdate(id: number, patchedCarouselItemRequestRequest?: PatchedCarouselItemRequestRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarouselItemRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mainCarouselCarouselPartialUpdate(id, patchedCarouselItemRequestRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarouselApi.mainCarouselCarouselPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this carousel item model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mainCarouselCarouselRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarouselItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mainCarouselCarouselRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarouselApi.mainCarouselCarouselRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this carousel item model.
         * @param {CarouselItemRequestRequest} carouselItemRequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mainCarouselCarouselUpdate(id: number, carouselItemRequestRequest: CarouselItemRequestRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarouselItemRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mainCarouselCarouselUpdate(id, carouselItemRequestRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarouselApi.mainCarouselCarouselUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CarouselApi - factory interface
 * @export
 */
export const CarouselApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CarouselApiFp(configuration)
    return {
        /**
         * 
         * @param {CarouselApiMainCarouselCarouselCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainCarouselCarouselCreate(requestParameters: CarouselApiMainCarouselCarouselCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CarouselItemRequest> {
            return localVarFp.mainCarouselCarouselCreate(requestParameters.carouselItemRequestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CarouselApiMainCarouselCarouselDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainCarouselCarouselDestroy(requestParameters: CarouselApiMainCarouselCarouselDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.mainCarouselCarouselDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainCarouselCarouselList(options?: RawAxiosRequestConfig): AxiosPromise<Array<CarouselItemResponse>> {
            return localVarFp.mainCarouselCarouselList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CarouselApiMainCarouselCarouselPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainCarouselCarouselPartialUpdate(requestParameters: CarouselApiMainCarouselCarouselPartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CarouselItemRequest> {
            return localVarFp.mainCarouselCarouselPartialUpdate(requestParameters.id, requestParameters.patchedCarouselItemRequestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CarouselApiMainCarouselCarouselRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainCarouselCarouselRetrieve(requestParameters: CarouselApiMainCarouselCarouselRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<CarouselItemResponse> {
            return localVarFp.mainCarouselCarouselRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CarouselApiMainCarouselCarouselUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainCarouselCarouselUpdate(requestParameters: CarouselApiMainCarouselCarouselUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CarouselItemRequest> {
            return localVarFp.mainCarouselCarouselUpdate(requestParameters.id, requestParameters.carouselItemRequestRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for mainCarouselCarouselCreate operation in CarouselApi.
 * @export
 * @interface CarouselApiMainCarouselCarouselCreateRequest
 */
export interface CarouselApiMainCarouselCarouselCreateRequest {
    /**
     * 
     * @type {CarouselItemRequestRequest}
     * @memberof CarouselApiMainCarouselCarouselCreate
     */
    readonly carouselItemRequestRequest: CarouselItemRequestRequest
}

/**
 * Request parameters for mainCarouselCarouselDestroy operation in CarouselApi.
 * @export
 * @interface CarouselApiMainCarouselCarouselDestroyRequest
 */
export interface CarouselApiMainCarouselCarouselDestroyRequest {
    /**
     * A unique integer value identifying this carousel item model.
     * @type {number}
     * @memberof CarouselApiMainCarouselCarouselDestroy
     */
    readonly id: number
}

/**
 * Request parameters for mainCarouselCarouselPartialUpdate operation in CarouselApi.
 * @export
 * @interface CarouselApiMainCarouselCarouselPartialUpdateRequest
 */
export interface CarouselApiMainCarouselCarouselPartialUpdateRequest {
    /**
     * A unique integer value identifying this carousel item model.
     * @type {number}
     * @memberof CarouselApiMainCarouselCarouselPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedCarouselItemRequestRequest}
     * @memberof CarouselApiMainCarouselCarouselPartialUpdate
     */
    readonly patchedCarouselItemRequestRequest?: PatchedCarouselItemRequestRequest
}

/**
 * Request parameters for mainCarouselCarouselRetrieve operation in CarouselApi.
 * @export
 * @interface CarouselApiMainCarouselCarouselRetrieveRequest
 */
export interface CarouselApiMainCarouselCarouselRetrieveRequest {
    /**
     * A unique integer value identifying this carousel item model.
     * @type {number}
     * @memberof CarouselApiMainCarouselCarouselRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for mainCarouselCarouselUpdate operation in CarouselApi.
 * @export
 * @interface CarouselApiMainCarouselCarouselUpdateRequest
 */
export interface CarouselApiMainCarouselCarouselUpdateRequest {
    /**
     * A unique integer value identifying this carousel item model.
     * @type {number}
     * @memberof CarouselApiMainCarouselCarouselUpdate
     */
    readonly id: number

    /**
     * 
     * @type {CarouselItemRequestRequest}
     * @memberof CarouselApiMainCarouselCarouselUpdate
     */
    readonly carouselItemRequestRequest: CarouselItemRequestRequest
}

/**
 * CarouselApi - object-oriented interface
 * @export
 * @class CarouselApi
 * @extends {BaseAPI}
 */
export class CarouselApi extends BaseAPI {
    /**
     * 
     * @param {CarouselApiMainCarouselCarouselCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarouselApi
     */
    public mainCarouselCarouselCreate(requestParameters: CarouselApiMainCarouselCarouselCreateRequest, options?: RawAxiosRequestConfig) {
        return CarouselApiFp(this.configuration).mainCarouselCarouselCreate(requestParameters.carouselItemRequestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CarouselApiMainCarouselCarouselDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarouselApi
     */
    public mainCarouselCarouselDestroy(requestParameters: CarouselApiMainCarouselCarouselDestroyRequest, options?: RawAxiosRequestConfig) {
        return CarouselApiFp(this.configuration).mainCarouselCarouselDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarouselApi
     */
    public mainCarouselCarouselList(options?: RawAxiosRequestConfig) {
        return CarouselApiFp(this.configuration).mainCarouselCarouselList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CarouselApiMainCarouselCarouselPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarouselApi
     */
    public mainCarouselCarouselPartialUpdate(requestParameters: CarouselApiMainCarouselCarouselPartialUpdateRequest, options?: RawAxiosRequestConfig) {
        return CarouselApiFp(this.configuration).mainCarouselCarouselPartialUpdate(requestParameters.id, requestParameters.patchedCarouselItemRequestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CarouselApiMainCarouselCarouselRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarouselApi
     */
    public mainCarouselCarouselRetrieve(requestParameters: CarouselApiMainCarouselCarouselRetrieveRequest, options?: RawAxiosRequestConfig) {
        return CarouselApiFp(this.configuration).mainCarouselCarouselRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CarouselApiMainCarouselCarouselUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarouselApi
     */
    public mainCarouselCarouselUpdate(requestParameters: CarouselApiMainCarouselCarouselUpdateRequest, options?: RawAxiosRequestConfig) {
        return CarouselApiFp(this.configuration).mainCarouselCarouselUpdate(requestParameters.id, requestParameters.carouselItemRequestRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

