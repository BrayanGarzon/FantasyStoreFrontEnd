/* tslint:disable */
/* eslint-disable */
/**
 * FantasyStore
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ImageType } from '../models';
// @ts-ignore
import type { ImageTypeRequest } from '../models';
// @ts-ignore
import type { PatchedImageTypeRequest } from '../models';
/**
 * ImageTypeApi - axios parameter creator
 * @export
 */
export const ImageTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ImageTypeRequest} imageTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainImageTypesImagesCreate: async (imageTypeRequest: ImageTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageTypeRequest' is not null or undefined
            assertParamExists('mainImageTypesImagesCreate', 'imageTypeRequest', imageTypeRequest)
            const localVarPath = `/api/main/image-types/images/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imageTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this image type model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainImageTypesImagesDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mainImageTypesImagesDestroy', 'id', id)
            const localVarPath = `/api/main/image-types/images/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainImageTypesImagesList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/main/image-types/images/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this image type model.
         * @param {PatchedImageTypeRequest} [patchedImageTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainImageTypesImagesPartialUpdate: async (id: number, patchedImageTypeRequest?: PatchedImageTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mainImageTypesImagesPartialUpdate', 'id', id)
            const localVarPath = `/api/main/image-types/images/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedImageTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this image type model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainImageTypesImagesRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mainImageTypesImagesRetrieve', 'id', id)
            const localVarPath = `/api/main/image-types/images/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this image type model.
         * @param {ImageTypeRequest} imageTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainImageTypesImagesUpdate: async (id: number, imageTypeRequest: ImageTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mainImageTypesImagesUpdate', 'id', id)
            // verify required parameter 'imageTypeRequest' is not null or undefined
            assertParamExists('mainImageTypesImagesUpdate', 'imageTypeRequest', imageTypeRequest)
            const localVarPath = `/api/main/image-types/images/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imageTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageTypeApi - functional programming interface
 * @export
 */
export const ImageTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImageTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ImageTypeRequest} imageTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mainImageTypesImagesCreate(imageTypeRequest: ImageTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mainImageTypesImagesCreate(imageTypeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageTypeApi.mainImageTypesImagesCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this image type model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mainImageTypesImagesDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mainImageTypesImagesDestroy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageTypeApi.mainImageTypesImagesDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mainImageTypesImagesList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImageType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mainImageTypesImagesList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageTypeApi.mainImageTypesImagesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this image type model.
         * @param {PatchedImageTypeRequest} [patchedImageTypeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mainImageTypesImagesPartialUpdate(id: number, patchedImageTypeRequest?: PatchedImageTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mainImageTypesImagesPartialUpdate(id, patchedImageTypeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageTypeApi.mainImageTypesImagesPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this image type model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mainImageTypesImagesRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mainImageTypesImagesRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageTypeApi.mainImageTypesImagesRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this image type model.
         * @param {ImageTypeRequest} imageTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mainImageTypesImagesUpdate(id: number, imageTypeRequest: ImageTypeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mainImageTypesImagesUpdate(id, imageTypeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageTypeApi.mainImageTypesImagesUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ImageTypeApi - factory interface
 * @export
 */
export const ImageTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImageTypeApiFp(configuration)
    return {
        /**
         * 
         * @param {ImageTypeApiMainImageTypesImagesCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainImageTypesImagesCreate(requestParameters: ImageTypeApiMainImageTypesImagesCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImageType> {
            return localVarFp.mainImageTypesImagesCreate(requestParameters.imageTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ImageTypeApiMainImageTypesImagesDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainImageTypesImagesDestroy(requestParameters: ImageTypeApiMainImageTypesImagesDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.mainImageTypesImagesDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainImageTypesImagesList(options?: RawAxiosRequestConfig): AxiosPromise<Array<ImageType>> {
            return localVarFp.mainImageTypesImagesList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ImageTypeApiMainImageTypesImagesPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainImageTypesImagesPartialUpdate(requestParameters: ImageTypeApiMainImageTypesImagesPartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImageType> {
            return localVarFp.mainImageTypesImagesPartialUpdate(requestParameters.id, requestParameters.patchedImageTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ImageTypeApiMainImageTypesImagesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainImageTypesImagesRetrieve(requestParameters: ImageTypeApiMainImageTypesImagesRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImageType> {
            return localVarFp.mainImageTypesImagesRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ImageTypeApiMainImageTypesImagesUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainImageTypesImagesUpdate(requestParameters: ImageTypeApiMainImageTypesImagesUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImageType> {
            return localVarFp.mainImageTypesImagesUpdate(requestParameters.id, requestParameters.imageTypeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for mainImageTypesImagesCreate operation in ImageTypeApi.
 * @export
 * @interface ImageTypeApiMainImageTypesImagesCreateRequest
 */
export interface ImageTypeApiMainImageTypesImagesCreateRequest {
    /**
     * 
     * @type {ImageTypeRequest}
     * @memberof ImageTypeApiMainImageTypesImagesCreate
     */
    readonly imageTypeRequest: ImageTypeRequest
}

/**
 * Request parameters for mainImageTypesImagesDestroy operation in ImageTypeApi.
 * @export
 * @interface ImageTypeApiMainImageTypesImagesDestroyRequest
 */
export interface ImageTypeApiMainImageTypesImagesDestroyRequest {
    /**
     * A unique integer value identifying this image type model.
     * @type {number}
     * @memberof ImageTypeApiMainImageTypesImagesDestroy
     */
    readonly id: number
}

/**
 * Request parameters for mainImageTypesImagesPartialUpdate operation in ImageTypeApi.
 * @export
 * @interface ImageTypeApiMainImageTypesImagesPartialUpdateRequest
 */
export interface ImageTypeApiMainImageTypesImagesPartialUpdateRequest {
    /**
     * A unique integer value identifying this image type model.
     * @type {number}
     * @memberof ImageTypeApiMainImageTypesImagesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedImageTypeRequest}
     * @memberof ImageTypeApiMainImageTypesImagesPartialUpdate
     */
    readonly patchedImageTypeRequest?: PatchedImageTypeRequest
}

/**
 * Request parameters for mainImageTypesImagesRetrieve operation in ImageTypeApi.
 * @export
 * @interface ImageTypeApiMainImageTypesImagesRetrieveRequest
 */
export interface ImageTypeApiMainImageTypesImagesRetrieveRequest {
    /**
     * A unique integer value identifying this image type model.
     * @type {number}
     * @memberof ImageTypeApiMainImageTypesImagesRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for mainImageTypesImagesUpdate operation in ImageTypeApi.
 * @export
 * @interface ImageTypeApiMainImageTypesImagesUpdateRequest
 */
export interface ImageTypeApiMainImageTypesImagesUpdateRequest {
    /**
     * A unique integer value identifying this image type model.
     * @type {number}
     * @memberof ImageTypeApiMainImageTypesImagesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {ImageTypeRequest}
     * @memberof ImageTypeApiMainImageTypesImagesUpdate
     */
    readonly imageTypeRequest: ImageTypeRequest
}

/**
 * ImageTypeApi - object-oriented interface
 * @export
 * @class ImageTypeApi
 * @extends {BaseAPI}
 */
export class ImageTypeApi extends BaseAPI {
    /**
     * 
     * @param {ImageTypeApiMainImageTypesImagesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageTypeApi
     */
    public mainImageTypesImagesCreate(requestParameters: ImageTypeApiMainImageTypesImagesCreateRequest, options?: RawAxiosRequestConfig) {
        return ImageTypeApiFp(this.configuration).mainImageTypesImagesCreate(requestParameters.imageTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ImageTypeApiMainImageTypesImagesDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageTypeApi
     */
    public mainImageTypesImagesDestroy(requestParameters: ImageTypeApiMainImageTypesImagesDestroyRequest, options?: RawAxiosRequestConfig) {
        return ImageTypeApiFp(this.configuration).mainImageTypesImagesDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageTypeApi
     */
    public mainImageTypesImagesList(options?: RawAxiosRequestConfig) {
        return ImageTypeApiFp(this.configuration).mainImageTypesImagesList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ImageTypeApiMainImageTypesImagesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageTypeApi
     */
    public mainImageTypesImagesPartialUpdate(requestParameters: ImageTypeApiMainImageTypesImagesPartialUpdateRequest, options?: RawAxiosRequestConfig) {
        return ImageTypeApiFp(this.configuration).mainImageTypesImagesPartialUpdate(requestParameters.id, requestParameters.patchedImageTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ImageTypeApiMainImageTypesImagesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageTypeApi
     */
    public mainImageTypesImagesRetrieve(requestParameters: ImageTypeApiMainImageTypesImagesRetrieveRequest, options?: RawAxiosRequestConfig) {
        return ImageTypeApiFp(this.configuration).mainImageTypesImagesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ImageTypeApiMainImageTypesImagesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageTypeApi
     */
    public mainImageTypesImagesUpdate(requestParameters: ImageTypeApiMainImageTypesImagesUpdateRequest, options?: RawAxiosRequestConfig) {
        return ImageTypeApiFp(this.configuration).mainImageTypesImagesUpdate(requestParameters.id, requestParameters.imageTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

