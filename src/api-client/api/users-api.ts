/* tslint:disable */
/* eslint-disable */
/**
 * FantasyStore
 * API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RegisterRequest } from '../models';
// @ts-ignore
import type { User } from '../models';
// @ts-ignore
import type { UserUpdateRequest } from '../models';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Obtiene el Usuario Actual utilizando el token en el HEADER
         * @summary Obtiene el Usuario Actual utilizando el token en el HEADER
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCurrentRetrieve: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/current/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersDeliveriesList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/deliveries/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Registrar un nuevo Usuario
         * @summary Registrar un nuevo Usuario
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRegisterCreate: async (registerRequest: RegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequest' is not null or undefined
            assertParamExists('usersRegisterCreate', 'registerRequest', registerRequest)
            const localVarPath = `/api/users/register/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cargar imagen del perfil
         * @summary Cargar imagen de perfil
         * @param {number} id 
         * @param {File} [avatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUploadImageProfileUpdate: async (id: number, avatar?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersUploadImageProfileUpdate', 'id', id)
            const localVarPath = `/api/users/upload-image-profile/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (avatar !== undefined) { 
                localVarFormParams.append('avatar', avatar as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Actualizar un usario
         * @summary Actualizar un usuario
         * @param {string} username 
         * @param {UserUpdateRequest} userUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserCreate: async (username: string, userUpdateRequest: UserUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('usersUserCreate', 'username', username)
            // verify required parameter 'userUpdateRequest' is not null or undefined
            assertParamExists('usersUserCreate', 'userUpdateRequest', userUpdateRequest)
            const localVarPath = `/api/users/user/{username}/`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Elimina un usuario, solo el usuario se puede eliminar a si mismo
         * @summary Elimina un usuario, solo el usuario se puede eliminar a si mismo
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserDestroy: async (username: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('usersUserDestroy', 'username', username)
            const localVarPath = `/api/users/user/{username}/`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtiene la información de un usuario mediante el nombre usuario
         * @summary Obtiene la información de un usuario mediante el nombre usuario
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserRetrieve: async (username: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('usersUserRetrieve', 'username', username)
            const localVarPath = `/api/users/user/{username}/`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Obtiene el Usuario Actual utilizando el token en el HEADER
         * @summary Obtiene el Usuario Actual utilizando el token en el HEADER
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersCurrentRetrieve(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersCurrentRetrieve(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersCurrentRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersDeliveriesList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersDeliveriesList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersDeliveriesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Registrar un nuevo Usuario
         * @summary Registrar un nuevo Usuario
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRegisterCreate(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersRegisterCreate(registerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersRegisterCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cargar imagen del perfil
         * @summary Cargar imagen de perfil
         * @param {number} id 
         * @param {File} [avatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUploadImageProfileUpdate(id: number, avatar?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUploadImageProfileUpdate(id, avatar, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersUploadImageProfileUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Actualizar un usario
         * @summary Actualizar un usuario
         * @param {string} username 
         * @param {UserUpdateRequest} userUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserCreate(username: string, userUpdateRequest: UserUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserCreate(username, userUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersUserCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Elimina un usuario, solo el usuario se puede eliminar a si mismo
         * @summary Elimina un usuario, solo el usuario se puede eliminar a si mismo
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserDestroy(username: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserDestroy(username, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersUserDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Obtiene la información de un usuario mediante el nombre usuario
         * @summary Obtiene la información de un usuario mediante el nombre usuario
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserRetrieve(username: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserRetrieve(username, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersUserRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Obtiene el Usuario Actual utilizando el token en el HEADER
         * @summary Obtiene el Usuario Actual utilizando el token en el HEADER
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCurrentRetrieve(options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.usersCurrentRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersDeliveriesList(options?: RawAxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.usersDeliveriesList(options).then((request) => request(axios, basePath));
        },
        /**
         * Registrar un nuevo Usuario
         * @summary Registrar un nuevo Usuario
         * @param {UsersApiUsersRegisterCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRegisterCreate(requestParameters: UsersApiUsersRegisterCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.usersRegisterCreate(requestParameters.registerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Cargar imagen del perfil
         * @summary Cargar imagen de perfil
         * @param {UsersApiUsersUploadImageProfileUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUploadImageProfileUpdate(requestParameters: UsersApiUsersUploadImageProfileUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.usersUploadImageProfileUpdate(requestParameters.id, requestParameters.avatar, options).then((request) => request(axios, basePath));
        },
        /**
         * Actualizar un usario
         * @summary Actualizar un usuario
         * @param {UsersApiUsersUserCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserCreate(requestParameters: UsersApiUsersUserCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.usersUserCreate(requestParameters.username, requestParameters.userUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Elimina un usuario, solo el usuario se puede eliminar a si mismo
         * @summary Elimina un usuario, solo el usuario se puede eliminar a si mismo
         * @param {UsersApiUsersUserDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserDestroy(requestParameters: UsersApiUsersUserDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersUserDestroy(requestParameters.username, options).then((request) => request(axios, basePath));
        },
        /**
         * Obtiene la información de un usuario mediante el nombre usuario
         * @summary Obtiene la información de un usuario mediante el nombre usuario
         * @param {UsersApiUsersUserRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserRetrieve(requestParameters: UsersApiUsersUserRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.usersUserRetrieve(requestParameters.username, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for usersRegisterCreate operation in UsersApi.
 * @export
 * @interface UsersApiUsersRegisterCreateRequest
 */
export interface UsersApiUsersRegisterCreateRequest {
    /**
     * 
     * @type {RegisterRequest}
     * @memberof UsersApiUsersRegisterCreate
     */
    readonly registerRequest: RegisterRequest
}

/**
 * Request parameters for usersUploadImageProfileUpdate operation in UsersApi.
 * @export
 * @interface UsersApiUsersUploadImageProfileUpdateRequest
 */
export interface UsersApiUsersUploadImageProfileUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof UsersApiUsersUploadImageProfileUpdate
     */
    readonly id: number

    /**
     * 
     * @type {File}
     * @memberof UsersApiUsersUploadImageProfileUpdate
     */
    readonly avatar?: File
}

/**
 * Request parameters for usersUserCreate operation in UsersApi.
 * @export
 * @interface UsersApiUsersUserCreateRequest
 */
export interface UsersApiUsersUserCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersUserCreate
     */
    readonly username: string

    /**
     * 
     * @type {UserUpdateRequest}
     * @memberof UsersApiUsersUserCreate
     */
    readonly userUpdateRequest: UserUpdateRequest
}

/**
 * Request parameters for usersUserDestroy operation in UsersApi.
 * @export
 * @interface UsersApiUsersUserDestroyRequest
 */
export interface UsersApiUsersUserDestroyRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersUserDestroy
     */
    readonly username: string
}

/**
 * Request parameters for usersUserRetrieve operation in UsersApi.
 * @export
 * @interface UsersApiUsersUserRetrieveRequest
 */
export interface UsersApiUsersUserRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersUserRetrieve
     */
    readonly username: string
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Obtiene el Usuario Actual utilizando el token en el HEADER
     * @summary Obtiene el Usuario Actual utilizando el token en el HEADER
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersCurrentRetrieve(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersCurrentRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersDeliveriesList(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersDeliveriesList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Registrar un nuevo Usuario
     * @summary Registrar un nuevo Usuario
     * @param {UsersApiUsersRegisterCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersRegisterCreate(requestParameters: UsersApiUsersRegisterCreateRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersRegisterCreate(requestParameters.registerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cargar imagen del perfil
     * @summary Cargar imagen de perfil
     * @param {UsersApiUsersUploadImageProfileUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUploadImageProfileUpdate(requestParameters: UsersApiUsersUploadImageProfileUpdateRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUploadImageProfileUpdate(requestParameters.id, requestParameters.avatar, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Actualizar un usario
     * @summary Actualizar un usuario
     * @param {UsersApiUsersUserCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserCreate(requestParameters: UsersApiUsersUserCreateRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUserCreate(requestParameters.username, requestParameters.userUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Elimina un usuario, solo el usuario se puede eliminar a si mismo
     * @summary Elimina un usuario, solo el usuario se puede eliminar a si mismo
     * @param {UsersApiUsersUserDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserDestroy(requestParameters: UsersApiUsersUserDestroyRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUserDestroy(requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Obtiene la información de un usuario mediante el nombre usuario
     * @summary Obtiene la información de un usuario mediante el nombre usuario
     * @param {UsersApiUsersUserRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserRetrieve(requestParameters: UsersApiUsersUserRetrieveRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUserRetrieve(requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }
}

